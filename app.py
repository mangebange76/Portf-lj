import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import requests
import json

# Konfiguration
st.set_page_config(page_title="Portf√∂ljanalys", layout="wide")

# Autentisering
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["GOOGLE_CREDENTIALS"], scopes=scope)
client = gspread.authorize(credentials)

# Ladda kalkylblad
SHEET_URL = st.secrets["SHEET_URL"]

def load_data():
    spreadsheet = client.open_by_url(SHEET_URL)
    worksheet = spreadsheet.sheet1
    data = worksheet.get_all_records()
    df = pd.DataFrame(data)
    return df, worksheet

# H√§mta valutakurser
def get_exchange_rates():
    try:
        res = requests.get("https://api.exchangerate.host/latest?base=USD&symbols=SEK,CAD,NOK")
        rates = res.json()["rates"]
        return {
            "USD": 1,
            "SEK": rates.get("SEK", 10.5),
            "NOK": rates.get("NOK", 1.0),
            "CAD": rates.get("CAD", 1.0),
        }
    except Exception:
        st.warning("Kunde inte h√§mta aktuella valutakurser. Visar f√∂rinst√§llda v√§rden.")
        return {"USD": 1, "SEK": 10.5, "NOK": 1, "CAD": 1}

# Ber√§kna portf√∂ljv√§rde
def calculate_portfolio_value(df, exchange_rates):
    df["Valutakurs"] = df["Valuta"].map(exchange_rates).fillna(1)
    df["V√§rde SEK"] = df["Antal"] * df["Kurs"] * df["Valutakurs"]
    total_value = df["V√§rde SEK"].sum()
    return df, total_value

# Utdelningsprognos (m√•natlig summering)
def calculate_dividend_projection(df):
    today = datetime.today()
    df["Kommande utdelning"] = pd.to_datetime(df["Utdelningsdatum"], errors='coerce')
    df["Utdelning v√§ntad"] = df.apply(
        lambda row: row["Antal"] * row["Utdelning per aktie"] if row["Kommande utdelning"] and row["Kommande utdelning"] >= today else 0,
        axis=1,
    )
    df["M√•nad"] = df["Kommande utdelning"].dt.strftime("%Y-%m")
    m√•nadsvis = df.groupby("M√•nad")["Utdelning v√§ntad"].sum().reset_index()
    m√•nadsvis = m√•nadsvis[m√•nadsvis["Utdelning v√§ntad"] > 0]
    total_kommande = df["Utdelning v√§ntad"].sum()
    return m√•nadsvis, total_kommande

def visa_portfolio(df, total_value, m√•nadsvis, total_kommande):
    st.header("üìä Portf√∂lj√∂versikt")
    st.metric("Totalt portf√∂ljv√§rde (SEK)", f"{total_value:,.0f} kr")

    st.dataframe(df[["Bolag", "Ticker", "Antal", "Kurs", "Valuta", "V√§rde SEK"]].sort_values(by="V√§rde SEK", ascending=False), use_container_width=True)

    st.markdown("---")
    st.subheader("üìÜ Prognos: Kommande utdelningar")

    if m√•nadsvis.empty:
        st.info("Inga bekr√§ftade framtida utdelningar just nu.")
    else:
        st.dataframe(m√•nadsvis.rename(columns={
            "M√•nad": "Utdelningsm√•nad",
            "Utdelning v√§ntad": "F√∂rv√§ntad utdelning (SEK)"
        }), use_container_width=True)

        st.metric("Totalt v√§ntad utdelning", f"{total_kommande:,.0f} kr")

            idx = df[df["Ticker"] == ticker].index[0] + 2  # +2 f√∂r att hoppa header och 0-index
            for i, key in enumerate(["Bolag", "Ticker", "Valuta", "Antal", "Kurs", "Utdelning", "M√•nad"]):
                worksheet.update_cell(idx, i + 1, ny_rad[key])
            st.success("Innehavet uppdaterat!")
        else:
            st.error("Ticker kunde inte matchas med n√•gon befintlig rad.")
    else:
        st.warning("Fyll i alla f√§lt korrekt f√∂r att uppdatera ett innehav.")

def visa_utdelningsprognos(df):
    st.subheader("üìÖ Kommande utdelningar")

    df["M√•nad"] = df["M√•nad"].astype(str).str.strip()
    aktuell_m√•nad = str(datetime.now().month)
    kommande = df[df["M√•nad"] == aktuell_m√•nad]

    if not kommande.empty:
        kommande["Utdelning totalt"] = kommande["Utdelning"] * kommande["Antal"] * kommande["Valutakurs"]
        total = kommande["Utdelning totalt"].sum()
        st.dataframe(kommande[["Bolag", "Ticker", "Utdelning totalt"]])
        st.markdown(f"**Totalt f√∂rv√§ntad utdelning denna m√•nad:** `{total:.2f} SEK`")
    else:
        st.info("Inga utdelningar planerade f√∂r denna m√•nad.")

def spara_utdelningshistorik(df, worksheet):
    m√•nad = datetime.now().month
    √•r = datetime.now().year
    total = (df[df["M√•nad"] == m√•nad]["Utdelning"] * df["Antal"] * df["Valutakurs"]).sum()
    
    # Kolumn Z och rad efter √•r - 2024 + 2 (f√∂rskjutet fr√•n rad 2)
    rad = √•r - 2024 + 2
    worksheet.update_acell(f'Z{rad}', total)

def visa_utdelningshistorik(worksheet):
    st.subheader("üìà Utdelningshistorik")

    data = worksheet.get_all_values()
    header = data[0]
    rows = data[1:]
    √•r_col = [row[0] for row in rows]
    utdelning_col = [row[25] if len(row) > 25 else "" for row in rows]  # Kolumn Z = index 25

    historik = pd.DataFrame({
        "√Ör": √•r_col,
        "Total utdelning (SEK)": utdelning_col
    })

    historik = historik[historik["√Ör"].str.isnumeric()]
    historik["√Ör"] = historik["√Ör"].astype(int)
    historik["Total utdelning (SEK)"] = pd.to_numeric(historik["Total utdelning (SEK)"], errors="coerce")
    historik = historik.dropna()

    if not historik.empty:
        st.bar_chart(historik.set_index("√Ör"))
    else:
        st.info("Ingen utdelningshistorik sparad √§n.")

# HUVUDFUNKTION
def main():
    st.title("üìä Aktieportf√∂lj och Utdelningssp√•rning")
    
    try:
        exchange_rates = get_exchange_rates()
    except:
        exchange_rates = {"USD": 10.0, "EUR": 11.0}
        st.warning("Kunde inte h√§mta aktuella valutakurser. Visar f√∂rinst√§llda v√§rden.")

    df, worksheet = load_data()
    df = uppdatera_valutakurs(df, exchange_rates)
    df, total_value = calculate_portfolio_value(df, exchange_rates)

    with st.expander("üìå Nuvarande innehav"):
        visa_tabell(df, total_value)

    st.markdown("---")
    st.header("‚ûï L√§gg till nytt innehav")
    l√§gg_till_innehav(df, worksheet)

    st.markdown("---")
    st.header("‚úèÔ∏è Redigera innehav")
    redigera_innehav(df, worksheet)

    st.markdown("---")
    visa_utdelningsprognos(df)
    spara_utdelningshistorik(df, worksheet)

    st.markdown("---")
    visa_utdelningshistorik(worksheet)

if __name__ == "__main__":
    main()
